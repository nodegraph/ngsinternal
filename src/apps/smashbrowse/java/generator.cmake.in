

file(READ "@CMAKE_SOURCE_DIR@/guicomponents/comms/messagetypes.h" cpp_types)
#message("read file: ${message_types}")

# remove "namespace ngs { }"
string(REGEX REPLACE "namespace ngs {(.*)}" "\n\n\n// ******** This file is autogenerated. *********\n\n\\1" cpp_types "${cpp_types}")

# convert enum class RequestType : int {...} ---> static enum RequestType {...}
string(REGEX REPLACE "enum class ([^{}: ]+)[ \n]*:[ \n]*int[ \n]*{([^{}]+)};" "static enum \\1 {\\2}" java_types "${cpp_types}")


# create the MessageEnums.java file for java

# replace " = 4," with "(4),"
string(REGEX REPLACE "[ ]*=[ ]*([0-9]+)" "(\\1)" java_types2 "${java_types}")

# add logic to get int value from enums
# semicolons are special in cmake, so they have to be escaped with \\\\.
string(REGEX REPLACE "static enum ([a-zA-Z0-9]+) {([^{}]+)\n+}" 
"\n\
static enum \\1 {\\2\\\\;\n\n\
  private final int value\\\\;\n\
  \\1(final int newValue) {value = newValue\\\\;}\n\
  public int get_value() {return value\\\\;}\n\
  \n\
  private static HashMap<Integer, \\1> map = new HashMap<Integer, \\1>()\\\\;\n\
  static {for (\\1 e : \\1.values()) {map.put(e.value, e)\\\\;}}\n\
  public static \\1 get_enum(int value) {return map.get(value)\\\\;}\n\
}" java_types3 "${java_types2}")

# add an import and wrap in a class called MessageEnums
set(message_enums "import java.util.HashMap\;\n\npublic class MessageEnums {\n${java_types3}\n}" )
file(WRITE "@CMAKE_CURRENT_SOURCE_DIR@/MessageEnums.java" ${message_enums})


